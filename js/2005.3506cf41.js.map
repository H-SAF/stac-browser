{"version":3,"file":"js/2005.3506cf41.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/@kurkle/color/dist/color.esm.js","webpack://@radiantearth/stac-browser/./node_modules/chart.js/dist/chunks/helpers.segment.js","webpack://@radiantearth/stac-browser/./node_modules/chart.js/dist/chart.js","webpack://@radiantearth/stac-browser/./node_modules/vue-chartjs/dist/index.js"],"sourcesContent":["/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.3.2\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop)) {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        window.addEventListener('test', null, options);\n        window.removeEventListener('test', null, options);\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.3.2\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points.slice(Math.max(this._drawStart - 1, 0), this._drawStart + this._drawCount);\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.3.2\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getDatasetArea(meta) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: xScale.left,\n            right: xScale.right,\n            top: yScale.top,\n            bottom: yScale.bottom\n        };\n    }\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta) || this.chartArea;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import { version, isProxy, toRaw, defineComponent, ref, shallowRef, onMounted, onBeforeUnmount, watch, h } from 'vue';\nimport { Chart as Chart$1, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\n\nconst CommonProps = {\n    data: {\n        type: Object,\n        required: true\n    },\n    options: {\n        type: Object,\n        default: ()=>({})\n    },\n    plugins: {\n        type: Array,\n        default: ()=>[]\n    },\n    datasetIdKey: {\n        type: String,\n        default: \"label\"\n    },\n    updateMode: {\n        type: String,\n        default: undefined\n    }\n};\nconst Props = {\n    type: {\n        type: String,\n        required: true\n    },\n    ...CommonProps\n};\n\nconst compatProps = version[0] === \"2\" ? (internals, props)=>Object.assign(internals, {\n        attrs: props\n    }) : (internals, props)=>Object.assign(internals, props);\nfunction toRawIfProxy(obj) {\n    return isProxy(obj) ? toRaw(obj) : obj;\n}\nfunction cloneProxy(obj) {\n    let src = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : obj;\n    return isProxy(src) ? new Proxy(obj, {}) : obj;\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets, datasetIdKey) {\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data, datasetIdKey) {\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"index\", {\n        intersect: true\n    }, false);\n}\n\nconst Chart = defineComponent({\n    props: Props,\n    setup (props, param) {\n        let { expose  } = param;\n        const canvasRef = ref(null);\n        const chartRef = shallowRef(null);\n        expose({\n            chart: chartRef\n        });\n        const renderChart = ()=>{\n            if (!canvasRef.value) return;\n            const { type , data , options , plugins , datasetIdKey  } = props;\n            const clonedData = cloneData(data, datasetIdKey);\n            const proxiedData = cloneProxy(clonedData, data);\n            chartRef.value = new Chart$1(canvasRef.value, {\n                type,\n                data: proxiedData,\n                options: {\n                    ...options\n                },\n                plugins\n            });\n        };\n        const destroyChart = ()=>{\n            const chart = toRaw(chartRef.value);\n            if (chart) {\n                chart.destroy();\n                chartRef.value = null;\n            }\n        };\n        const update = (chart)=>{\n            chart.update(props.updateMode);\n        };\n        onMounted(renderChart);\n        onBeforeUnmount(destroyChart);\n        watch([\n            ()=>props.options,\n            ()=>props.data\n        ], (param, param1)=>{\n            let [nextOptionsProxy, nextDataProxy] = param, [prevOptionsProxy, prevDataProxy] = param1;\n            const chart = toRaw(chartRef.value);\n            if (!chart) {\n                return;\n            }\n            let shouldUpdate = false;\n            if (nextOptionsProxy) {\n                const nextOptions = toRawIfProxy(nextOptionsProxy);\n                const prevOptions = toRawIfProxy(prevOptionsProxy);\n                if (nextOptions && nextOptions !== prevOptions) {\n                    setOptions(chart, nextOptions);\n                    shouldUpdate = true;\n                }\n            }\n            if (nextDataProxy) {\n                const nextLabels = toRawIfProxy(nextDataProxy.labels);\n                const prevLabels = toRawIfProxy(prevDataProxy.labels);\n                const nextDatasets = toRawIfProxy(nextDataProxy.datasets);\n                const prevDatasets = toRawIfProxy(prevDataProxy.datasets);\n                if (nextLabels !== prevLabels) {\n                    setLabels(chart.config.data, nextLabels);\n                    shouldUpdate = true;\n                }\n                if (nextDatasets && nextDatasets !== prevDatasets) {\n                    setDatasets(chart.config.data, nextDatasets, props.datasetIdKey);\n                    shouldUpdate = true;\n                }\n            }\n            if (shouldUpdate) {\n                update(chart);\n            }\n        }, {\n            deep: true\n        });\n        return ()=>{\n            return h(\"canvas\", {\n                ref: canvasRef\n            });\n        };\n    }\n});\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return defineComponent({\n        props: CommonProps,\n        setup (props, param) {\n            let { expose  } = param;\n            const ref = shallowRef(null);\n            const reforwardRef = (chartRef)=>{\n                ref.value = chartRef?.chart;\n            };\n            expose({\n                chart: ref\n            });\n            return ()=>{\n                return h(Chart, compatProps({\n                    ref: reforwardRef\n                }, {\n                    type,\n                    ...props\n                }));\n            };\n        }\n    });\n}\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, createTypedChart, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","isShort","r","g","hexParse","str","ret","len","length","alpha","hexString","undefined","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","hueValue","rgb2hsl","range","calln","Array","isArray","map","hsl2rgb","hwb2rgb","hsv2rgb","hue","hueParse","m","exec","p1","p2","rotate","deg","hslString","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","unpack","unpacked","keys","Object","tkeys","j","ok","nk","replace","parseInt","names","nameParse","transparent","toLowerCase","RGB_RE","rgbParse","rgbString","to","pow","from","interpolate","rgb1","rgb2","t","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","Color","constructor","type","this","_rgb","_valid","valid","obj","mix","color","weight","c1","c2","w2","p","w1","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","noop","uid","id","isNullOrUndef","value","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toPercentage","dimension","endsWith","parseFloat","toDimension","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","create","klen","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","_splitKey","parts","split","part","push","_getKeyResolver","resolveObjectKey","resolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","_isClickEvent","PI","TAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","roundedRange","niceRange","floor","fraction","niceFraction","_factorize","result","sqrt","sort","pop","isNumber","isNaN","almostWhole","rounded","_setMinAndMaxByKey","array","property","toRadians","degrees","toDegrees","radians","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_int16Range","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","_filterBetween","values","arrayEvents","listenArrayEvents","listener","_chartjs","listeners","defineProperty","configurable","enumerable","forEach","method","base","res","object","unlistenArrayEvents","stub","splice","_arrayUnique","items","set","Set","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","debounce","delay","timeout","clearTimeout","setTimeout","_toLeftRightCenter","align","_alignStartEnd","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","applyAnimationsDefaults","defaults","duration","easing","loop","describe","_fallback","_indexable","_scriptable","name","properties","active","animation","resize","show","animations","visible","hide","applyLayoutsDefaults","autoPadding","padding","top","right","bottom","left","intlCache","Map","getNumberFormat","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","formatNumber","num","format","formatters","numeric","tickValue","ticks","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","applyScaleDefaults","display","offset","beginAtZero","bounds","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","route","startsWith","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","override","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","local","appliers","toFontString","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","clip","unclipArea","setRenderOpts","opts","translation","fillStyle","textAlign","textBaseline","decorateText","line","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","console","warn","resolve","inputs","info","cacheable","_addGrace","minmax","change","keepZero","add","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","Symbol","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","proxy","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","setContext","receiver","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","isScriptable","isIndexable","readKey","prefix","needsSubResolver","_resolveScriptable","_resolveArray","getValue","Error","join","delete","createSubResolver","arr","filter","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","_parseObjectDataRadialScale","meta","count","iScale","_parsing","parsed","parse","EPSILON","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","getStyle","el","getPropertyValue","positions","getPositionedStyle","styles","suffix","pos","useOffsetPos","shadowRoot","getCanvasPosition","touches","offsetX","offsetY","box","getBoundingClientRect","clientX","clientY","getRelativePosition","event","borderBox","boxSizing","paddings","borders","getContainerSize","maxHeight","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","containerSize","maintainHeight","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","getRightToLeftAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","getLeftToRightAdapter","_itemWidth","getRtlAdapter","rtl","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","draw","_active","_total","tick","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","rej","resolved","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","resolveTargetOptions","_createAnimations","$shared","awaitAll","$animations","then","anim","all","scaleClip","allowedOverflow","defaultClip","xScale","yScale","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","convertObjectDataToArray","adata","isStacked","stacked","getStackKey","indexScale","valueScale","getUserBounds","minDefined","maxDefined","NEGATIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","_cachedMeta","_stacks","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","shift","createDatasetContext","dataset","createDataContext","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","static","_cachedDataOpts","getMeta","_type","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","isPluginEnabled","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","computeMinSampleSize","curr","_length","updateMinAndPrev","getPixelForValue","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v2","setInflateAmount","inflateAmount","BarController","grouped","_index_","_value_","iAxisKey","vAxisKey","super","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","_getStacks","skipNull","_getStackCount","_getStackIndex","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","getRatioAndOffset","circumference","cutout","ratioX","ratioY","startAngle","endAngle","startX","startY","endX","endY","calcMax","calcMin","maxX","maxY","minX","minY","DoughnutController","animateRotate","animateScale","spacing","legend","generateLabels","fontColor","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","metaData","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","PolarAreaController","angleLines","circular","pointLabels","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","DateAdapterBase","members","init","formats","diff","startOf","endOf","adapters","_date","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","skip","getDistanceMetricForAxis","useX","useY","deltaX","deltaY","getIntersectItems","useFinalPosition","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","getProps","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","getMargins","marginForPositions","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","eventListenerOptions","addListener","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","ceil","majorStart","majorEnd","reverseAlign","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","lineValue","garbageCollect","caches","gcLen","getTickMarkLength","getTitleHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","valueAt","idx","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","borderDashOffset","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","findIndex","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","defaultRoutes","routeDefaults","routes","propertyParts","sourceName","sourceScope","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","getOpts","pluginOpts","pluginScopeKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","needContext","subResolver","resolverCache","hasFunction","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","clipArc","pixelMargin","angleMargin","toRadiusCorners","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","fix","radiusOffset","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","parseBorderRadius","maxR","enableBorder","boundingRects","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","inflateRect","amount","refRect","BarElement","addRectPath","mouseX","mouseY","inXRange","inYRange","BORDER_COLORS","BACKGROUND_COLORS","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","containsColorsDefinition","plugin_colors","forceOverride","_args","chartOptions","colorizer","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","_element","WeakMap","positioners","average","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","boxWidth","boxHeight","bodyFont","titleFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","rtlHelper","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","usePointStyle","drawOptions","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","textDirection","positionChanged","_positionChanged","_ignoreReplayEvents","handleEvent","plugin_tooltip","afterInit","afterDraw","afterEvent","addIfString","addedLabels","unshift","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","CommonProps","required","default","datasetIdKey","updateMode","Props","compatProps","internals","attrs","toRawIfProxy","cloneProxy","src","setOptions","nextOptions","setLabels","currentData","nextLabels","setDatasets","nextDatasets","addedDatasets","nextDataset","currentDataset","find","cloneData","nextData","setup","param","expose","canvasRef","chartRef","renderChart","clonedData","proxiedData","destroyChart","param1","nextOptionsProxy","nextDataProxy","prevOptionsProxy","prevDataProxy","shouldUpdate","prevOptions","prevLabels","prevDatasets","deep","ref","createTypedChart","registerables","reforwardRef","Bar","Pie"],"sourceRoot":""}